#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <cstring>
using namespace std;

const int TOTAL_ROOMS = 50;
int rooms[TOTAL_ROOMS];
mutex room_mutex;
int successful_bookings = 0;

void reset_rooms(int value = 0) {
    lock_guard<mutex> lock(room_mutex);
    memset(rooms, value, sizeof(rooms));
    successful_bookings = 0;
}

void book_rooms(int thread_id, int attempts) {
    for (int i = 0; i < attempts; ++i) {
        int room_to_book = rand() % TOTAL_ROOMS;

        lock_guard<mutex> lock(room_mutex);
        if (rooms[room_to_book] == 0) {
            rooms[room_to_book] = 1;
            ++successful_bookings;
            cout << "Booked room: " << room_to_book << endl;
        } else {
            cout << "Failed to book room: " << room_to_book << " (already taken)" << endl;
        }
    }
}

// Test Case

void TestCase1() {
    reset_rooms(0); 
    for (int i = 0; i < TOTAL_ROOMS; ++i) {
        lock_guard<mutex> lock(room_mutex);
        rooms[i] = 0;
        rooms[i] = 1;
        ++successful_bookings;
        cout << "Booked room: " << i << endl;
    }
    cout << "Total bookings: " << successful_bookings << "/50\n";
}

void TestCase2() {
    reset_rooms(1);

    for (int i = 0; i < 100; ++i) {
        int room_to_book = rand() % TOTAL_ROOMS;

        lock_guard<mutex> lock(room_mutex);
        if (rooms[room_to_book] == 0) {
            rooms[room_to_book] = 1;
            ++successful_bookings;
            cout << "Booked room: " << room_to_book << endl;
        } else {
            cout << "Failed to book room: " << room_to_book << " (already taken)" << endl;
        }
    }
    cout << "Total bookings: " << successful_bookings << "/100\n";
}

void TestCase3() {
    reset_rooms(0);
    srand(42);

    for (int i = 0; i < 100; ++i) {
        int room_to_book = rand() % TOTAL_ROOMS;

        lock_guard<mutex> lock(room_mutex);
        if (rooms[room_to_book] == 0) {
            rooms[room_to_book] = 1;
            ++successful_bookings;
            cout << "Booked room: " << room_to_book << endl;
        } else {
            cout << "Failed to book room: " << room_to_book << " (already taken)" << endl;
        }
    }
    cout << "Total bookings: " << successful_bookings << "/100\n";
}

void TestCase4() {
    reset_rooms(0);
    srand(42);

    vector<thread> threads;
    for (int i = 0; i < 4; ++i) {
        threads.emplace_back(book_rooms, i, 25);
    }

    for (auto& t : threads) {
        t.join();
    }

    cout << "Total bookings: " << successful_bookings << "/100\n";
}


int main() {
    int choice = 0;
    cout << "Select a Test Case: \n1: All Rooms Available\n2: Fully Booked Hotel\n3: Random Bookings (Seed = 42)\n4: Parallel Thread Safety\n: ";
    cin >> choice;
    if (choice == 1) {
        TestCase1();
    }else if(choice == 2) {
        TestCase2();
    }else if(choice == 3) {
        TestCase3();
    }else if(choice == 4) {
        TestCase4();
    }else {
        cout << "Invalid Choice!" << endl;
    }

    return 0;
}
