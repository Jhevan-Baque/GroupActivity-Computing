#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <cstdlib>  // for rand(), srand()
#include <ctime>    // for time()

const int TOTAL_ROOMS = 50;
int rooms[TOTAL_ROOMS] = {0}; // 0 = available, 1 = booked
std::mutex room_mutex;
int successful_bookings = 0;

void book_rooms(int thread_id, int attempts) {
    for (int i = 0; i < attempts; ++i) {
        int room_to_book = rand() % TOTAL_ROOMS;

        std::lock_guard<std::mutex> lock(room_mutex); // Automatically unlocks when out of scope
        if (rooms[room_to_book] == 0) {
            rooms[room_to_book] = 1;
            ++successful_bookings;
            std::cout << "Booked room: " << room_to_book << std::endl;
        } else {
            std::cout << "Failed to book room: " << room_to_book << " (already taken)" << std::endl;
        }
    }
}

int main() {
    srand(42); // For reproducibility

    // Create and run 4 threads, each making 25 booking attempts
    std::vector<std::thread> threads;
    for (int i = 0; i < 4; ++i) {
        threads.emplace_back(book_rooms, i, 25);
    }

    // Join all threads
    for (auto& t : threads) {
        t.join();
    }

    std::cout << "Total bookings: " << successful_bookings << "/100" << std::endl;

    return 0;
}